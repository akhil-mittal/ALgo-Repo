Algorithm
1) Create a set mstSet that keeps track of vertices already included in MST.
2) Assign a key value to all vertices in the input graph. Initialize all key values as INFINITE. 
   Assign key value as 0 for the first vertex so that it is picked first.
3) While mstSet doesn’t include all vertices
….a) Pick a vertex u which is not there in mstSet and has minimum key value.
….b) Include u to mstSet.
….c) Update key value of all adjacent vertices of u. To update the key values, iterate through all adjacent vertices. 
     For every adjacent vertex v, if weight of edge u-v is less than the previous key value of v, 
     update the key value as weight of u-v
 
implementation - 

#include<iostream>
#include<limits.h>
using namespace std;

int min_key_idx(int key[],bool visited[],int v){
       
       int idx,mn = INT_MAX;
       for(int i=0;i<v;++i){
          if(visited[i] == false && key[i] < mn){
              mn = key[i];
              idx = i;
          }
       }
       
  return idx;
}

void Prims(int v , int graph[100][100]){
        int parent[v];
        int key[v];
        bool visited[v];
        
        for(int i=0;i<v;i++){
          key[i] = INT_MAX;
          visited[i] = false;
        }
        
        key[0] = 0;
        parent[0] = -1;      //0 is the root and root doesn't have parent
        
        for(int i=0;i<v-1;i++){
           
           int u = min_key_idx(key,visited,v);
           
           visited[u] = true;
           
           for(int k=0;k<v;k++){
              if(graph[u][k] && visited[k]==false && graph[u][k] < key[k]){
                  key[k] = graph[u][k];
                  parent[k] = u;
              }
           }
         }
         
         //print the edges
         
         for(int i=1;i<v;i++)
           cout<<parent[i]<<"\t"<<i<<"\t"<<graph[parent[i]][i]<<endl;
         
}

int main(){

    int v;      //vertices
    cin>>v;
    int graph[100][100] = {
                          {0, 2, 0, 6, 0},
                          {2, 0, 3, 8, 5},
                          {0, 3, 0, 0, 7},
                          {6, 8, 0, 0, 9},
                          {0, 5, 7, 9, 0},
                     };
     Prims(v,graph);
    
    
 return 0;
 }
